import { getToken, onMessage } from 'firebase/messaging';
import { getFirebaseMessaging } from './firebase';
import { saveFcmToken } from '@/api/services/auth';

const VAPID_KEY = process.env.NEXT_PUBLIC_FIREBASE_VAPID_KEY;
const FCM_TOKEN_KEY = 'fcm_token';

function getStoredFcmToken(): string | null {
  return localStorage.getItem(FCM_TOKEN_KEY);
}

function setStoredFcmToken(token: string): void {
  localStorage.setItem(FCM_TOKEN_KEY, token);
}

function clearStoredFcmToken(): void {
  localStorage.removeItem(FCM_TOKEN_KEY);
}

async function registerServiceWorkerWithConfig(): Promise<ServiceWorkerRegistration | null> {
  try {
    if ('serviceWorker' in navigator) {
      const registration = await navigator.serviceWorker.register('/firebase-messaging-sw.js');
      await navigator.serviceWorker.ready;
      
      if (registration.active) {
        registration.active.postMessage({
          type: 'INIT_FIREBASE_CONFIG',
          config: {
            apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
            authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
            projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
            storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
            messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
            appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,
            measurementId: process.env.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID,
          },
        });
      }
      
      return registration;
    }
    return null;
  } catch (error) {
    console.error('‚ùå ÏÑúÎπÑÏä§ ÏõåÏª§ Îì±Î°ù Ïã§Ìå®:', error);
    return null;
  }
}

export async function requestNotificationPermissionAndGetToken(): Promise<string | null> {
  try {
    if (typeof window === 'undefined' || !('Notification' in window)) {
      console.warn('ÌòÑÏû¨ ÌôòÍ≤ΩÏùÄ ÏïåÎ¶ºÏùÑ ÏßÄÏõêÌïòÏßÄ ÏïäÏäµÎãàÎã§.');
      return null;
    }

    await registerServiceWorkerWithConfig();

    const messaging = await getFirebaseMessaging();
    if (!messaging) {
      console.warn('Firebase Messaging Ï¥àÍ∏∞Ìôî Ïã§Ìå®');
      return null;
    }

    const permission = await Notification.requestPermission();
    console.log('ÏïåÎ¶º Í∂åÌïú ÏÉÅÌÉú:', permission);

    if (permission === 'granted') {
      if (!VAPID_KEY) {
        console.error('VAPID ÌÇ§Í∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
        return null;
      }

      const currentToken = await getToken(messaging, {
        vapidKey: VAPID_KEY,
      });

      if (currentToken) {
        const storedToken = getStoredFcmToken();
        
        if (storedToken !== currentToken) {
          try {
            const message = await saveFcmToken(currentToken);
            console.log('‚úÖ FCM ÌÜ†ÌÅ∞:', message);
            setStoredFcmToken(currentToken);
          } catch (error: any) {
            console.error('‚ùå FCM ÌÜ†ÌÅ∞ Ï†ÄÏû• Ïã§Ìå®:', error?.response?.data?.message || error.message);
            return null;
          }
        } else {
          console.log('‚úÖ FCM ÌÜ†ÌÅ∞ Î≥ÄÍ≤Ω ÏóÜÏùå (Î∞±ÏóîÎìú Ï†ÑÏÜ° ÏÉùÎûµ)');
        }
        
        return currentToken;
      } else {
        console.warn('‚ö†Ô∏è FCM ÌÜ†ÌÅ∞ÏùÑ Í∞ÄÏ†∏Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.');
        return null;
      }
    } else if (permission === 'denied') {
      console.warn('‚ùå ÏïåÎ¶º Í∂åÌïúÏù¥ Í±∞Î∂ÄÎêòÏóàÏäµÎãàÎã§.');
      clearStoredFcmToken();
      return null;
    } else {
      console.warn('‚ö†Ô∏è ÏïåÎ¶º Í∂åÌïú ÏöîÏ≤≠Ïù¥ Î¨¥ÏãúÎêòÏóàÏäµÎãàÎã§.');
      return null;
    }
  } catch (error) {
    console.error('‚ùå FCM ÌÜ†ÌÅ∞ ÌöçÎìù Ï§ë Ïò§Î•ò Î∞úÏÉù:', error);
    return null;
  }
}

export async function onForegroundMessage(
  callback: (payload: any) => void
): Promise<(() => void) | null> {
  try {
    const messaging = await getFirebaseMessaging();
    if (!messaging) {
      console.warn('Firebase Messaging Ï¥àÍ∏∞Ìôî Ïã§Ìå®');
      return null;
    }

    const unsubscribe = onMessage(messaging, (payload) => {
      console.log('üì® Ìè¨Ïñ¥Í∑∏ÎùºÏö¥Îìú Î©îÏãúÏßÄ ÏàòÏã†:', payload);
      callback(payload);
    });

    return unsubscribe;
  } catch (error) {
    console.error('‚ùå Ìè¨Ïñ¥Í∑∏ÎùºÏö¥Îìú Î©îÏãúÏßÄ Î¶¨Ïä§ÎÑà Îì±Î°ù Ïã§Ìå®:', error);
    return null;
  }
}

export async function refreshFcmToken(): Promise<string | null> {
  clearStoredFcmToken();
  return await requestNotificationPermissionAndGetToken();
}

export function clearFcmToken(): void {
  clearStoredFcmToken();
}

